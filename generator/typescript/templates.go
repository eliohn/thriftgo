// Copyright 2024 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package typescript

// Templates 返回所有 TypeScript 模板
func Templates() []string {
	return []string{
		fileTemplate,
		indexTemplate,
		importsTemplate,
		enumTemplate,
		structTemplate,
		serviceTemplate,
		constantTemplate,
		typedefTemplate,
		unionTemplate,
		exceptionTemplate,
		singleEnumTemplate,
		singleStructTemplate,
		singleServiceTemplate,
	}
}

// 文件模板
const fileTemplate = `
{{- define "thrift" -}}
"use strict";

/* tslint:disable */
/* eslint-disable */
// Generated by thriftgo {{Version}}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Package }}
// Package: {{.Package}}
{{- end }}

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

{{- range .Constants }}
{{ template "constant" . }}
{{- end }}

{{- range .Typedefs }}
{{ template "typedef" . }}
{{- end }}

{{- range .Enums }}
{{ template "enum" . }}
{{- end }}

{{- range .Structs }}
{{ template "struct" . }}
{{- end }}

{{- range .Unions }}
{{ template "union" . }}
{{- end }}

{{- range .Exceptions }}
{{ template "exception" . }}
{{- end }}

{{- range .Services }}
{{ template "service" . }}
{{- end }}
{{- end -}}
`

// index.ts 模板
const indexTemplate = `
{{- define "index" -}}
"use strict";


/* tslint:disable */
/* eslint-disable */
// Generated by thriftgo {{Version}}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Package }}
// Package: {{.Package}}
{{- end }}

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

{{- range .Constants }}
{{ template "constant" . }}
{{- end }}

{{- range .Typedefs }}
{{ template "typedef" . }}
{{- end }}

{{- range .Enums }}
export { {{ GetEnumName .Name }} } from './{{ ToLower .Name }}';
{{- end }}

{{- range .Structs }}
export { {{ GetInterfaceName .Name }} } from './{{ ToLower .Name }}';
{{- end }}

{{- range .Unions }}
export { {{ GetInterfaceName .Name }} } from './{{ ToLower .Name }}';
{{- end }}

{{- range .Exceptions }}
export { {{ GetInterfaceName .Name }} } from './{{ ToLower .Name }}';
{{- end }}

{{- range .Services }}
export { {{ GetInterfaceName .Name }} } from './{{ ToLower .Name }}';
{{- end }}
{{- end -}}
`

// 导入模板
const importsTemplate = `
{{- define "imports" -}}
{{- range .Imports }}
import { {{ range $index, $type := .Types }}{{ if $index }}, {{ end }}{{ $type }}{{ end }} } from '{{ .Path }}';
{{- end }}
{{- end -}}
`

// 枚举模板
const enumTemplate = `
{{- define "enum" -}}
export enum {{ GetEnumName .Name }} {
{{- range .Values }}
  {{ GetConstantName .Name }} = {{ .Value }},
{{- end }}
}
{{- end -}}
`

// 结构体模板
const structTemplate = `
{{- define "struct" -}}
export interface {{ GetInterfaceName .Name }} {
{{- $expandedFields := GetExpandedFields . }}
{{- $expandedFieldNames := GetExpandedFieldNames . }}
{{- range .Fields }}
{{- if not (index $expandedFieldNames .Name) }}
  {{ GetPropertyName .Name }}{{ if IsOptional . }}?{{ end }}: {{ GetFieldType . }};
{{- end }}
{{- end }}
{{- if $expandedFields }}
{{- range $expandedFields }}
  {{ GetPropertyName .Name }}{{ if IsOptional . }}?{{ end }}: {{ GetFieldType . }};
{{- end }}
{{- end }}
}
{{- end -}}
`

// 联合体模板
const unionTemplate = `
{{- define "union" -}}
export interface {{ GetInterfaceName .Name }} {
{{- range .Fields }}
  {{ GetPropertyName .Name }}{{ if IsOptional . }}?{{ end }}: {{ GetFieldType . }};
{{- end }}
}
{{- end -}}
`

// 异常模板
const exceptionTemplate = `
{{- define "exception" -}}
export interface {{ GetInterfaceName .Name }} {
{{- range .Fields }}
  {{ GetPropertyName .Name }}{{ if IsOptional . }}?{{ end }}: {{ GetFieldType . }};
{{- end }}
}
{{- end -}}
`

// 服务模板
const serviceTemplate = `
{{- define "service" -}}
export interface {{ GetInterfaceName .Name }} {
{{- range .Functions }}
  {{ GetPropertyName .Name }}{{ GetMethodSignature . }};
{{- end }}
}
{{- end -}}
`

// 常量模板
const constantTemplate = `
{{- define "constant" -}}
export const {{ GetConstantName .Name }}: {{ GetTypeScriptType .Type }} = {{ GetConstantValue . }};
{{- end -}}
`

// 类型定义模板
const typedefTemplate = `
{{- define "typedef" -}}
export type {{ GetInterfaceName .Alias }} = {{ GetTypeScriptType .Type }};
{{- end -}}
`

// 单独枚举文件模板
const singleEnumTemplate = `
{{- define "singleEnum" -}}
"use strict";

/* tslint:disable */
/* eslint-disable */
// Generated by thriftgo {{Version}}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

{{- range .Enums }}
{{ template "enum" . }}
{{- end }}
{{- end -}}
`

// 单独结构体文件模板
const singleStructTemplate = `
{{- define "singleStruct" -}}
"use strict";

/* tslint:disable */
/* eslint-disable */
// Generated by thriftgo {{Version}}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

{{- range .Structs }}
{{ template "struct" . }}
{{- end }}
{{- end -}}
`

// 单独服务文件模板
const singleServiceTemplate = `
{{- define "singleService" -}}
"use strict";

/* tslint:disable */
/* eslint-disable */
// Generated by thriftgo {{Version}}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

{{- range .Services }}
{{ template "service" . }}
{{- end }}
{{- end -}}
`
