// Copyright 2021 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package templates

// HTTP 客户端模板
const HttpClientTemplate = `
{{- define "httpClient" -}}
"use strict";

// Generated by thriftgo {{Version}}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

/**
 * HTTP 客户端配置
 */
export interface HttpClientConfig {
  baseURL: string;
  timeout?: number;
  headers?: Record<string, string>;
}

/**
 * HTTP 响应类型
 */
export interface HttpResponse<T = any> {
  data: T;
  status: number;
  statusText: string;
  headers: Record<string, string>;
}

/**
 * HTTP 客户端接口
 */
export interface HttpClient {
  get<T>(url: string, config?: any): Promise<HttpResponse<T>>;
  post<T>(url: string, data?: any, config?: any): Promise<HttpResponse<T>>;
  put<T>(url: string, data?: any, config?: any): Promise<HttpResponse<T>>;
  delete<T>(url: string, config?: any): Promise<HttpResponse<T>>;
}

/**
 * 默认的 fetch 实现
 */
class FetchHttpClient implements HttpClient {
  constructor(private config: HttpClientConfig) {}

  async get<T>(url: string, config?: any): Promise<HttpResponse<T>> {
    const response = await fetch(this.config.baseURL + url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...this.config.headers,
        ...config?.headers,
      },
      ...config,
    });

    const data = await response.json();
    return {
      data,
      status: response.status,
      statusText: response.statusText,
      headers: this.parseHeaders(response.headers),
    };
  }

  async post<T>(url: string, data?: any, config?: any): Promise<HttpResponse<T>> {
    const response = await fetch(this.config.baseURL + url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...this.config.headers,
        ...config?.headers,
      },
      body: data ? JSON.stringify(data) : undefined,
      ...config,
    });

    const responseData = await response.json();
    return {
      data: responseData,
      status: response.status,
      statusText: response.statusText,
      headers: this.parseHeaders(response.headers),
    };
  }

  async put<T>(url: string, data?: any, config?: any): Promise<HttpResponse<T>> {
    const response = await fetch(this.config.baseURL + url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        ...this.config.headers,
        ...config?.headers,
      },
      body: data ? JSON.stringify(data) : undefined,
      ...config,
    });

    const responseData = await response.json();
    return {
      data: responseData,
      status: response.status,
      statusText: response.statusText,
      headers: this.parseHeaders(response.headers),
    };
  }

  async delete<T>(url: string, config?: any): Promise<HttpResponse<T>> {
    const response = await fetch(this.config.baseURL + url, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        ...this.config.headers,
        ...config?.headers,
      },
      ...config,
    });

    const data = await response.json();
    return {
      data,
      status: response.status,
      statusText: response.statusText,
      headers: this.parseHeaders(response.headers),
    };
  }

  private parseHeaders(headers: Headers): Record<string, string> {
    const result: Record<string, string> = {};
    headers.forEach((value, key) => {
      result[key] = value;
    });
    return result;
  }
}

{{- range .Services }}
/**
 * 异步 {{ GetInterfaceName .Name }} 接口
 */
export interface Async{{ GetInterfaceName .Name }} {
{{- range .Functions }}
  {{ GetPropertyName .Name }}({{ range $index, $arg := .Arguments }}{{ if $index }}, {{ end }}{{ GetPropertyName .Name }}{{ if IsOptional . }}?{{ end }}: {{ GetFieldType . }}{{ end }}): Promise<{{ if .FunctionType }}{{ GetTypeScriptType .FunctionType }}{{ else }}void{{ end }}>;
{{- end }}
}

/**
 * {{ GetInterfaceName .Name }} HTTP 客户端实现
 * 根据 Thrift 服务定义自动生成的 HTTP 请求方法
 */
export class {{ GetInterfaceName .Name }}Client implements Async{{ GetInterfaceName .Name }} {
  private httpClient: HttpClient;

  constructor(config: HttpClientConfig, httpClient?: HttpClient) {
    this.httpClient = httpClient || new FetchHttpClient(config);
  }

{{- range .Functions }}
  /**
   * {{ GetPropertyName .Name }}
{{- if .Annotations.Get "api.get" }}
   * API: GET {{ .Annotations.Get "api.get" }}
{{- else if .Annotations.Get "api.post" }}
   * API: POST {{ .Annotations.Get "api.post" }}
{{- else if .Annotations.Get "api.put" }}
   * API: PUT {{ .Annotations.Get "api.put" }}
{{- else if .Annotations.Get "api.delete" }}
   * API: DELETE {{ .Annotations.Get "api.delete" }}
{{- end }}
{{- range .Arguments }}
   * @param {{ GetPropertyName .Name }} {{ .Name }}
{{- end }}
{{- if .FunctionType }}
   * @returns {{ GetTypeScriptType .FunctionType }}
{{- else }}
   * @returns void
{{- end }}
   */
  async {{ GetPropertyName .Name }}({{ range $index, $arg := .Arguments }}{{ if $index }}, {{ end }}{{ GetPropertyName .Name }}{{ if IsOptional . }}?{{ end }}: {{ GetFieldType . }}{{ end }}): Promise<{{ if .FunctionType }}{{ GetTypeScriptType .FunctionType }}{{ else }}void{{ end }}> {
{{- $apiMethod := "" }}
{{- $apiPath := "" }}
{{- if .Annotations.Get "api.get" }}
{{- $apiMethod = "GET" }}
{{- $apiPath = .Annotations.Get "api.get" }}
{{- else if .Annotations.Get "api.post" }}
{{- $apiMethod = "POST" }}
{{- $apiPath = .Annotations.Get "api.post" }}
{{- else if .Annotations.Get "api.put" }}
{{- $apiMethod = "PUT" }}
{{- $apiPath = .Annotations.Get "api.put" }}
{{- else if .Annotations.Get "api.delete" }}
{{- $apiMethod = "DELETE" }}
{{- $apiPath = .Annotations.Get "api.delete" }}
{{- end }}
{{- if $apiMethod }}
    // 构建 URL，替换路径参数
    const url = ` + "`" + `{{ $apiPath }}` + "`" + `;
    
    const response = await this.httpClient.{{ ToLower $apiMethod }}<{{ if .FunctionType }}{{ GetTypeScriptType .FunctionType }}{{ else }}void{{ end }}>(url{{ if or (eq $apiMethod "POST") (eq $apiMethod "PUT") }}{{ range .Arguments }}, {{ GetPropertyName .Name }}{{ end }}{{ end }});
    
    if (response.status >= 200 && response.status < 300) {
      return response.data;
    } else {
      throw new Error(` + "`" + `HTTP ${response.status}: ${response.statusText}` + "`" + `);
    }
{{- else }}
    // 没有 API 注解，使用默认实现
    throw new Error('Method {{ GetPropertyName .Name }} is not implemented');
{{- end }}
  }

{{- end }}
}

/**
 * 创建 {{ GetInterfaceName .Name }} 客户端实例的工厂函数
 * @param config HTTP 客户端配置
 * @param httpClient 可选的 HTTP 客户端实现
 * @returns {{ GetInterfaceName .Name }} 客户端实例
 */
export function create{{ GetInterfaceName .Name }}Client(
  config: HttpClientConfig,
  httpClient?: HttpClient
): {{ GetInterfaceName .Name }}Client {
  return new {{ GetInterfaceName .Name }}Client(config, httpClient);
}

{{- end }}
{{- end -}}
`
