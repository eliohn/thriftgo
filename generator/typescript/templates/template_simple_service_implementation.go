// Copyright 2021 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing
// permissions and limitations under the License.

package templates

const SimpleServiceImplementationTemplate = `
{{- define "simpleServiceImplementation" -}}
"use strict";

/* tslint:disable */
/* eslint-disable */

// Generated by thriftgo {{Version}}
// Source: {{ GetSourceThriftFile . }}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

{{- range .Services }}
// 导入服务接口
import type { I{{ GetInterfaceName .Name }} } from './{{ ToLower .Name }}';
import axios from '@/utils/request';
import { BizException } from "@/types/exception"

/**
 * {{ GetInterfaceName .Name }} Axios HTTP 客户端实现
 * 根据 Thrift 服务定义和 API 注解自动生成的 HTTP 请求实现
 * 支持使用项目中已实例化的 axios 实例
 */
export class {{ GetInterfaceName .Name }}Client implements I{{ GetInterfaceName .Name }} {
{{- range .Functions }}
  /**
   * {{ .Name }}
{{- if .Annotations.Get "api.get" }}
   * API: GET {{ .Annotations.Get "api.get" }}
{{- else if .Annotations.Get "api.post" }}
   * API: POST {{ .Annotations.Get "api.post" }}
{{- else if .Annotations.Get "api.put" }}
   * API: PUT {{ .Annotations.Get "api.put" }}
{{- else if .Annotations.Get "api.delete" }}
   * API: DELETE {{ .Annotations.Get "api.delete" }}
{{- end }}
{{- range .Arguments }}
   * @param {{ GetPropertyName .Name }} {{ .Name }}
{{- end }}
{{- if .FunctionType }}
   * @returns {{ GetTypeScriptType .FunctionType }}
{{- else }}
   * @returns void
{{- end }}
   */
  async {{ GetPropertyName .Name }}({{ range $index, $arg := .Arguments }}{{ if $index }}, {{ end }}{{ GetPropertyName .Name }}{{ if and (IsOptional .) (not (IsStructField .)) }}?{{ end }}: {{ GetFieldType . }}{{ end }}): Promise<{{ if .FunctionType }}{{ GetTypeScriptType .FunctionType }}{{ else }}void{{ end }}> {
    try {
      let url = '{{ if .Annotations.Get "api.get" }}{{ index (.Annotations.Get "api.get") 0 }}{{ else if .Annotations.Get "api.post" }}{{ index (.Annotations.Get "api.post") 0 }}{{ else if .Annotations.Get "api.put" }}{{ index (.Annotations.Get "api.put") 0 }}{{ else if .Annotations.Get "api.delete" }}{{ index (.Annotations.Get "api.delete") 0 }}{{ end }}';
{{- range $index, $arg := .Arguments }}
{{- end }}

{{- range $argIndex, $arg := .Arguments }}
{{- if $arg.Annotations.Get "api.path" }}
{{- $pathValue := index ($arg.Annotations.Get "api.path") 0 }}
{{- if $pathValue }}
      if ({{ GetPropertyName $arg.Name }} !== undefined && {{ GetPropertyName $arg.Name }} !== null) {
        url = url.replace(String(':'+'{{ $pathValue }}'), String({{ GetPropertyName $arg.Name }}));
      }
{{- end }}
{{- end }}
{{- end }}

{{- range $argIndex, $arg := .Arguments }}
{{- if IsStructField $arg }}
{{- $structAnnotations := GetStructFieldAnnotationsForTemplate $arg }}
{{- range $fieldName, $fieldAnnotations := $structAnnotations }}
{{- if index $fieldAnnotations "api.path" }}
{{- $pathValue := index $fieldAnnotations "api.path" }}
{{- if $pathValue }}
      if ({{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== undefined && {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== null) {
        url = url.replace(String(':'+'{{ $pathValue }}'), String({{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }}));
      }
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- range $argIndex, $arg := .Arguments }}
      {{- if not (IsStructField $arg) }}
      if (url.includes('{'+'{{ GetPropertyName $arg.Name }}'+'}')) {
        url = url.replace(String('{'+'{{ GetPropertyName $arg.Name }}'+'}'), String({{ GetPropertyName $arg.Name }}));
      }
      {{- end }}
{{- end }}

      let queryParams: any = {};

{{- range $argIndex, $arg := .Arguments }}
{{- if $arg.Annotations.Get "api.query" }}
{{- $queryValue := index ($arg.Annotations.Get "api.query") 0 }}
{{- if $queryValue }}
      if ({{ GetPropertyName $arg.Name }} !== undefined && {{ GetPropertyName $arg.Name }} !== null) {
        queryParams['{{ $queryValue }}'] = {{ GetPropertyName $arg.Name }};
      }
{{- end }}
{{- end }}
{{- end }}

{{- range $argIndex, $arg := .Arguments }}
{{- if IsStructField $arg }}
{{- $structAnnotations := GetStructFieldAnnotationsForTemplate $arg }}
{{- range $fieldName, $fieldAnnotations := $structAnnotations }}
{{- if index $fieldAnnotations "api.query" }}
{{- $queryValue := index $fieldAnnotations "api.query" }}
{{- if $queryValue }}
      if ({{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== undefined && {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== null) {
        queryParams['{{ $queryValue }}'] = {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }};
      }
{{- end }}
{{- end }}
{{- end }}

{{- end }}
{{- end }}
      {{- $apiMethod := "" }}
      {{- if .Annotations.Get "api.get" }}
      {{- $apiMethod = "GET" }}
      {{- else if .Annotations.Get "api.post" }}
      {{- $apiMethod = "POST" }}
      {{- else if .Annotations.Get "api.put" }}
      {{- $apiMethod = "PUT" }}
      {{- else if .Annotations.Get "api.delete" }}
      {{- $apiMethod = "DELETE" }}
      {{- end }}

      {{- if or (eq $apiMethod "POST") (eq $apiMethod "PUT") }}
      let bodyParam : any = {};
      
      {{- range $argIndex, $arg := .Arguments }}
      {{- if and (IsStructField $arg) ($arg.Annotations.Get "api.body") }}
      {{- $structAnnotations := GetStructFieldAnnotationsForTemplate $arg }}
      {{- range $fieldName, $fieldAnnotations := $structAnnotations }}
      {{- if not (index $fieldAnnotations "api.query") }}
      {{- if not (index $fieldAnnotations "api.path") }}
      if ({{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== undefined && {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== null) {
        bodyParam['{{ GetPropertyName $fieldName }}'] = {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }};
      }
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}

      {{- if eq $apiMethod "GET" }}
      {{- range $argIndex, $arg := .Arguments }}
      {{- if and (not ($arg.Annotations.Get "api.path")) (not ($arg.Annotations.Get "api.query")) (not ($arg.Annotations.Get "api.body")) }}
      {{- if IsStructField $arg }}
      {{- $structAnnotations := GetStructFieldAnnotationsForTemplate $arg }}
      {{- range $fieldName, $fieldAnnotations := $structAnnotations }}
      {{- if not (index $fieldAnnotations "api.query") }}
      
      if ({{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== undefined && {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== null) {
        queryParams['{{ GetPropertyName $fieldName }}'] = {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }};
      }
      {{- end }}
      {{- end }}
      {{- else }}
      if ({{ GetPropertyName $arg.Name }} !== undefined && {{ GetPropertyName $arg.Name }} !== null && !url.includes('{'+'{{ GetPropertyName $arg.Name }}'+'}')) {
        queryParams['{{ GetPropertyName $arg.Name }}'] = {{ GetPropertyName $arg.Name }};
      }
      {{- end }}
      {{- end }}
      {{- end }}
      {{- else if or (eq $apiMethod "POST") (eq $apiMethod "PUT") }}
      {{- $hasBodyParam := false }}
      {{- range .Arguments }}
      {{- if .Annotations.Get "api.body" }}
      {{- $hasBodyParam = true }}
      {{- end }}
      {{- end }}
      {{- if not $hasBodyParam }}
      {{- range $argIndex, $arg := .Arguments }}
      {{- if and (not ($arg.Annotations.Get "api.path")) (not ($arg.Annotations.Get "api.query")) (not ($arg.Annotations.Get "api.body")) }}
      {{- if IsStructField $arg }}
      {{- $structAnnotations := GetStructFieldAnnotationsForTemplate $arg }}
      {{- range $fieldName, $fieldAnnotations := $structAnnotations }}
      {{- if not (index $fieldAnnotations "api.query") }}
      {{- if not (index $fieldAnnotations "api.path") }}
      if ({{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== undefined && {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }} !== null) {
        bodyParam['{{ GetPropertyName $fieldName }}'] = {{ GetPropertyName $arg.Name }}.{{ GetPropertyName $fieldName }};
      }
      {{- end }}
      {{- end }}
      {{- end }}
      {{- else }}
      if ({{ GetPropertyName $arg.Name }} !== undefined && {{ GetPropertyName $arg.Name }} !== null && !url.includes('{'+'{{ GetPropertyName $arg.Name }}'+'}')) {
        bodyParam['{{ GetPropertyName $arg.Name }}'] = {{ GetPropertyName $arg.Name }};
      }
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      
      
      {{- if eq $apiMethod "GET" }}
      let response = await axios.get(url, { params: queryParams });
      {{- else if eq $apiMethod "POST" }}
      let response = await axios.post(url, bodyParam, { params: queryParams });
      {{- else if eq $apiMethod "PUT" }}
      let response = await axios.put(url, bodyParam, { params: queryParams });
      {{- else if eq $apiMethod "DELETE" }}
      let response = await axios.delete(url, { params: queryParams });
      {{- end }}
      
      if (response.status >= 200 && response.status < 300) {
     	if (response.data.code !== 0) {
          throw new BizException(response.data.code, response.data.msg);
        }
        return response.data;
      } else {
        throw new Error(` + "`" + `HTTP ${response.status}: ${response.statusText}` + "`" + `);
      }
    } catch (error) {
      console.error('{{ .Name }} request failed:', error);
      throw error;
    }
  }
{{- end }}
}
{{- end }}
{{- end -}}
`
