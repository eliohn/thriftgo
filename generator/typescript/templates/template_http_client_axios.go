// Copyright 2021 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package templates

// HTTP 客户端 Axios 模板
const HttpClientAxiosTemplate = `
{{- define "httpClientAxios" -}}
"use strict";

// Generated by thriftgo {{Version}}
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

{{- if .Imports }}
{{ template "imports" . }}
{{- end }}

/**
 * Axios 配置类型
 */
export interface AxiosConfig {
  baseURL: string;
  timeout?: number;
  headers?: Record<string, string>;
  validateStatus?: (status: number) => boolean;
  withCredentials?: boolean;
}

/**
 * Axios HTTP 客户端实现
 * 需要安装 axios: npm install axios @types/axios
 */
export class AxiosHttpClient {
  private axios: any;

  constructor(private config: AxiosConfig) {
    try {
      this.axios = eval('require')('axios');
    } catch (error) {
      throw new Error('Axios is not installed. Please run: npm install axios');
    }
  }

  async get<T>(url: string, config?: any): Promise<any> {
    const response = await this.axios.get(url, {
      ...this.config,
      ...config,
    });
    return response;
  }

  async post<T>(url: string, data?: any, config?: any): Promise<any> {
    const response = await this.axios.post(url, data, {
      ...this.config,
      ...config,
    });
    return response;
  }

  async put<T>(url: string, data?: any, config?: any): Promise<any> {
    const response = await this.axios.put(url, data, {
      ...this.config,
      ...config,
    });
    return response;
  }

  async delete<T>(url: string, config?: any): Promise<any> {
    const response = await this.axios.delete(url, {
      ...this.config,
      ...config,
    });
    return response;
  }
}

{{- range .Services }}
/**
 * {{ GetInterfaceName .Name }} Axios 客户端实现
 */
export class {{ GetInterfaceName .Name }}AxiosClient implements Async{{ GetInterfaceName .Name }} {
  private httpClient: AxiosHttpClient;

  constructor(config: AxiosConfig) {
    this.httpClient = new AxiosHttpClient(config);
  }

{{- range .Functions }}
  async {{ GetPropertyName .Name }}({{ range $index, $arg := .Arguments }}{{ if $index }}, {{ end }}{{ GetPropertyName .Name }}{{ if IsOptional . }}?{{ end }}: {{ GetFieldType . }}{{ end }}): Promise<{{ if .FunctionType }}{{ GetTypeScriptType .FunctionType }}{{ else }}void{{ end }}> {
{{- $apiMethod := "" }}
{{- $apiPath := "" }}
{{- if .Annotations.Get "api.get" }}
{{- $apiMethod = "GET" }}
{{- $apiPath = .Annotations.Get "api.get" }}
{{- else if .Annotations.Get "api.post" }}
{{- $apiMethod = "POST" }}
{{- $apiPath = .Annotations.Get "api.post" }}
{{- else if .Annotations.Get "api.put" }}
{{- $apiMethod = "PUT" }}
{{- $apiPath = .Annotations.Get "api.put" }}
{{- else if .Annotations.Get "api.delete" }}
{{- $apiMethod = "DELETE" }}
{{- $apiPath = .Annotations.Get "api.delete" }}
{{- end }}
{{- if $apiMethod }}
    const url = ` + "`" + `{{ $apiPath }}` + "`" + `;
    const response = await this.httpClient.{{ ToLower $apiMethod }}<{{ if .FunctionType }}{{ GetTypeScriptType .FunctionType }}{{ else }}void{{ end }}>(url{{ if or (eq $apiMethod "POST") (eq $apiMethod "PUT") }}{{ range .Arguments }}, {{ GetPropertyName .Name }}{{ end }}{{ end }});
    return response.data;
{{- else }}
    throw new Error('Method {{ GetPropertyName .Name }} is not implemented');
{{- end }}
  }

{{- end }}
}

/**
 * 创建 {{ GetInterfaceName .Name }} Axios 客户端实例的工厂函数
 */
export function create{{ GetInterfaceName .Name }}AxiosClient(config: AxiosConfig): {{ GetInterfaceName .Name }}AxiosClient {
  return new {{ GetInterfaceName .Name }}AxiosClient(config);
}

{{- end }}
{{- end -}}
`
